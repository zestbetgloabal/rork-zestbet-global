name: Database Setup

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "SETUP" to run database setup'
        required: true
        default: ''

jobs:
  database-setup:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'SETUP'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Verify DATABASE_URL
      run: |
        echo "🔍 Verifying DATABASE_URL..."
        if [ -z "$DATABASE_URL" ]; then
          echo "❌ DATABASE_URL is not set!"
          echo "Please check your GitHub repository secrets."
          exit 1
        fi
        echo "✅ DATABASE_URL is configured"
        echo "Database URL length: ${#DATABASE_URL} characters"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Test database connection
      run: |
        echo "🔄 Testing database connection..."
        if [[ "$DATABASE_URL" == *"?"* ]]; then
          DB_URL="${DATABASE_URL}&sslmode=require"
        elif [[ "$DATABASE_URL" == *"sslmode="* ]]; then
          DB_URL="$DATABASE_URL"
        else
          DB_URL="${DATABASE_URL}?sslmode=require"
        fi
        psql --ipv4 --set=ON_ERROR_STOP=1 "$DB_URL" -c "SELECT version();"
        echo "✅ Database connection successful!"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Create database tables
      run: |
        echo "🔄 Creating database tables..."
        cat > migration.sql << 'EOF'
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Users table
CREATE TABLE IF NOT EXISTS users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email TEXT NOT NULL UNIQUE,
  name TEXT NOT NULL,
  avatar TEXT,
  bio TEXT,
  phone TEXT,
  password TEXT,
  provider TEXT DEFAULT 'email',
  zest_coins DECIMAL(10,2) DEFAULT 1000.00,
  preferences JSONB DEFAULT '{"notifications": true, "privacy": "public", "language": "en"}',
  email_verified BOOLEAN DEFAULT false,
  email_verification_code TEXT,
  verification_code_expiry TIMESTAMP,
  phone_verified BOOLEAN DEFAULT false,
  phone_verification_code TEXT,
  phone_verification_expiry TIMESTAMP,
  status TEXT DEFAULT 'active',
  password_reset_code TEXT,
  password_reset_expiry TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Bets table
CREATE TABLE IF NOT EXISTS bets (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  title TEXT NOT NULL,
  description TEXT,
  amount DECIMAL(10,2) NOT NULL,
  category TEXT NOT NULL,
  end_date TIMESTAMP NOT NULL,
  is_public BOOLEAN DEFAULT true,
  participants JSONB DEFAULT '[]',
  created_by UUID NOT NULL REFERENCES users(id),
  status TEXT DEFAULT 'active',
  winner UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Challenges table
CREATE TABLE IF NOT EXISTS challenges (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  title TEXT NOT NULL,
  description TEXT,
  type TEXT NOT NULL,
  duration INTEGER NOT NULL,
  reward DECIMAL(10,2),
  is_public BOOLEAN DEFAULT true,
  max_participants INTEGER,
  participants JSONB DEFAULT '[]',
  created_by UUID NOT NULL REFERENCES users(id),
  status TEXT DEFAULT 'active',
  start_date TIMESTAMP NOT NULL,
  end_date TIMESTAMP NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Transactions table
CREATE TABLE IF NOT EXISTS transactions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id),
  type TEXT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  description TEXT NOT NULL,
  related_id UUID,
  status TEXT DEFAULT 'completed',
  created_at TIMESTAMP DEFAULT NOW()
);

-- Live Events table
CREATE TABLE IF NOT EXISTS live_events (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  title TEXT NOT NULL,
  description TEXT,
  category TEXT NOT NULL,
  status TEXT DEFAULT 'upcoming',
  start_time TIMESTAMP NOT NULL,
  end_time TIMESTAMP NOT NULL,
  participants JSONB DEFAULT '[]',
  current_data JSONB,
  betting_odds JSONB DEFAULT '{}',
  total_bets INTEGER DEFAULT 0,
  viewers INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Live Bet Markets table
CREATE TABLE IF NOT EXISTS live_bet_markets (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  event_id UUID NOT NULL REFERENCES live_events(id),
  question TEXT NOT NULL,
  options JSONB NOT NULL,
  status TEXT DEFAULT 'open',
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Live Bet Wagers table
CREATE TABLE IF NOT EXISTS live_bet_wagers (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  market_id UUID NOT NULL REFERENCES live_bet_markets(id),
  event_id UUID NOT NULL REFERENCES live_events(id),
  user_id UUID NOT NULL REFERENCES users(id),
  option_key TEXT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  odds_at_placement DECIMAL(10,2) NOT NULL,
  potential_win DECIMAL(10,2) NOT NULL,
  status TEXT DEFAULT 'active',
  created_at TIMESTAMP DEFAULT NOW()
);

-- Social Posts table
CREATE TABLE IF NOT EXISTS social_posts (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id),
  content TEXT NOT NULL,
  images JSONB DEFAULT '[]',
  type TEXT NOT NULL,
  related_id UUID,
  likes JSONB DEFAULT '[]',
  comments JSONB DEFAULT '[]',
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_bets_created_by ON bets(created_by);
CREATE INDEX IF NOT EXISTS idx_bets_status ON bets(status);
CREATE INDEX IF NOT EXISTS idx_challenges_created_by ON challenges(created_by);
CREATE INDEX IF NOT EXISTS idx_challenges_status ON challenges(status);
CREATE INDEX IF NOT EXISTS idx_transactions_user_id ON transactions(user_id);
CREATE INDEX IF NOT EXISTS idx_live_events_status ON live_events(status);
CREATE INDEX IF NOT EXISTS idx_live_bet_markets_event_id ON live_bet_markets(event_id);
CREATE INDEX IF NOT EXISTS idx_live_bet_wagers_user_id ON live_bet_wagers(user_id);
CREATE INDEX IF NOT EXISTS idx_social_posts_user_id ON social_posts(user_id);
EOF
        if [[ "$DATABASE_URL" == *"?"* ]]; then
          DB_URL="${DATABASE_URL}&sslmode=require"
        elif [[ "$DATABASE_URL" == *"sslmode="* ]]; then
          DB_URL="$DATABASE_URL"
        else
          DB_URL="${DATABASE_URL}?sslmode=require"
        fi
        psql --ipv4 --set=ON_ERROR_STOP=1 "$DB_URL" -f migration.sql
        echo "✅ Database tables created successfully!"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Insert test data
      run: |
        echo "🔄 Inserting test data..."
        cat > testdata.sql << 'EOF'
INSERT INTO users (email, name, password, status, zest_coins) 
VALUES 
  ('test@example.com', 'Test User', 'password123', 'active', 1000.00),
  ('pinkpistachio72@gmail.com', 'Apple Review', 'zestapp2025#', 'active', 1000.00),
  ('admin@zestbet.com', 'ZestBet Admin', 'admin2025!', 'active', 10000.00)
ON CONFLICT (email) DO NOTHING;
EOF
        if [[ "$DATABASE_URL" == *"?"* ]]; then
          DB_URL="${DATABASE_URL}&sslmode=require"
        elif [[ "$DATABASE_URL" == *"sslmode="* ]]; then
          DB_URL="$DATABASE_URL"
        else
          DB_URL="${DATABASE_URL}?sslmode=require"
        fi
        psql --ipv4 --set=ON_ERROR_STOP=1 "$DB_URL" -f testdata.sql
        echo "✅ Test data inserted successfully!"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Verify setup
      run: |
        echo "🔄 Verifying database setup..."
        if [[ "$DATABASE_URL" == *"?"* ]]; then
          DB_URL="${DATABASE_URL}&sslmode=require"
        elif [[ "$DATABASE_URL" == *"sslmode="* ]]; then
          DB_URL="$DATABASE_URL"
        else
          DB_URL="${DATABASE_URL}?sslmode=require"
        fi
        psql --ipv4 --set=ON_ERROR_STOP=1 "$DB_URL" -c "SELECT 
          'users' as table_name, COUNT(*) as record_count FROM users
        UNION ALL
        SELECT 'bets', COUNT(*) FROM bets
        UNION ALL  
        SELECT 'challenges', COUNT(*) FROM challenges
        UNION ALL
        SELECT 'transactions', COUNT(*) FROM transactions
        UNION ALL
        SELECT 'live_events', COUNT(*) FROM live_events;"
        echo "✅ Database verification complete!"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Setup complete
      run: |
        echo "🎉 Database setup completed successfully!"
        echo ""
        echo "✅ Database connection verified"
        echo "✅ All tables created with indexes"
        echo "✅ Test data inserted"
        echo "✅ Setup verification passed"
        echo ""
        echo "Your database is now ready for production use!"